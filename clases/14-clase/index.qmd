---
title: "**Tableros de Quarto**"
author: ""
date: ""
format:
  html:
    page-layout: full
    include-in-header: 
      - text: |
          <link rel="icon" type="image/x-icon" href="favicon.ico">    
    toc: true
    toc-title: Contenidos
    toc-location: left
    toc_float: true
    toc_collapsed: false
    toc_depth: 4
number_sections: true
anchor_sections: true
theme: 
  light: [united, custom.scss]
  dark: darkly
editor: source
---

## Introducción

A partir de la versión 1.4, Quarto incorpora la creación de tableros (dashboard). Con una forma de producción sencilla que tiene varios elementos similares a los utilizados por el paquete *flexdashboard* de RMarkdown.

Los tableros pueden ser estáticos o interactivos, se les puede incluir una gran variedad de componentes como dispositivos externos provenientes de [htmlwidgets](https://www.htmlwidgets.org/) y sus diseños suelen ser flexibles y adaptativos (los componentes se redimensionan de forma inteligente para llenar el navegador y se adaptan para su visualización en dispositivos móviles).

## Cabecera YAML

La cabecera que define un tablero tiene el formato configurado en `dashboard`.

``` yaml
---
format: dashboard
---
```

Algunas opciones de ejecución YAML son similares a las conocidas para otros documentos: `title`, `author`, `theme`, `toc`, otras son particulares de este formato: `orientation`, `scrolling`, `expandable`, `nav-buttons`, etc.

Cuando el tablero tiene componentes de interactividad debemos indicar en la cabecera el motor **Shiny** que manejará el código, de la siguiente forma:

``` yaml
---
format: dashboard
server: shiny
---
```

::: {.callout-note appearance="simple" icon="false"}
En tableros con componentes interactivos **htmlwidgets** basados en JavaScript u **Observable JS** no hace falta incluir nada especial en la cabecera.
:::


## Componentes de un tablero

Los componentes básicos de un tablero son:

### Barra de navegación (páginas): 

Suele ser la barra superior horizontal donde incluimos el ícono, título y autor junto con enlaces a subpáginas (si se define más de una página). 

Aquí un ejemplo de barra de navegación:

![](images/navegacion.PNG){fig-align="center" width="700"}

### Barras laterales, filas y columnas y conjuntos de pestañas: 

En estas barras se ubican muchas veces las entradas (inputs) interactivas.

Además se pueden agregar filas y columnas con encabezados markdown (atributos opcionales para controlar la altura, el ancho, etc.) y conjuntos de pestañas para dividir aún más el contenido. 

![](images/sidebar.PNG){fig-align="center" width="150"}


### Tarjetas (gráficos, tablas, cajas de valores, contenido): 

Las tarjetas (cards) son contenedores para resultados de celdas y texto markdown de formato libre. El contenido de las tarjetas normalmente se asigna a las celdas de su documento fuente.

En estas celdas se suele incluir valores, tablas, gráficos, elementos dinámicos o interactivos. Algunos formatos vienen previamente soportados como las cajas de valores (valuebox)

## Diseño

A la combinación de barras y tarjetas con su ubicación y orientación la llamamos diseño del tablero.

El diseño va a estar dado por los distintos componentes que deseemos mostrar. Mientras las páginas se declaran con encabezados 1 (#) los bloques fila o columna se hacen con encabezados 2 (##), a los cuales se le puede agregar definición de ancho con `width` o alto con `height`. 

Las barras laterales se arman con encabezados 1 (#) con estilo `.sidebar` y las pestañas con encabezados 2 y estilo `.tabset`.

Algunos ejemplos:

**Barra lateral**

````{.yaml}
---
title: "Mi Tablero"
format: dashboard
---

# Pagina 1

## {.sidebar}

```{{r}}

```

## Column

```{{r}}

```

```{{r}}

```

````

![](images/layout2.PNG){fig-align="center" width="600"}


**Filas**

````{.yaml}
---
title: "Mi Tablero"
format: dashboard
---

## Row {height=70%}

```{{r}}
```

## Row {height=30%}

```{{r}}
```

```{{r}}
```

````

![](images/layout3.PNG){fig-align="center" width="600"}


**Columnas**

````{.yaml}
---
title: "Mi Tablero"
format: dashboard
---

## Column {width=60%}

```{{r}}
```

## Column {width=40%}

```{{r}}
```

```{{r}}
```

````

![](images/layout4.PNG){fig-align="center" width="600"}

**Pestañas**

````{.yaml}
---
title: "Mi Tablero"
format: dashboard
---

## Row

```{{r}}
```

## Row {.tabset}

```{{r}}
#| title: Chart 2
```

```{{r}}
#| title: Chart 3
```

````

![](images/layout1.PNG){fig-align="center" width="600"}

## Tarjetas

Las tarjetas son la unidad fundamental de visualización dentro de los tableros.

Pueden encerrar tanto texto markdown como código que produzca alguna salida tipo valor, tabla o gráfico.

````{.yaml}
::: {.card}

Aquí va el contenido de la tarjeta. Puede ser un markdown directo o la salida de código.

```{{r}}

```

:::

````

Las cajas de valor son tarjetas especiales que se declaran con el estilo reservado `.valuebox`.

````{.yaml}

::: {.valuebox}
Fecha actual

`{r} Sys.Date()`
:::

````


También se pueden declarar con metadatos dentro del bloque de código:

````{.yaml}
#| content: valuebox
#| title: "Caja de valor"
n <- mtcars |> 
  tibble::as_tibble() |> 
  dplyr::count() |> 
  dplyr::pull(n)

list(
  icon = "trash",
  color = "red",
  value = n
)


````


![](images/valuebox.PNG){fig-align="center" width="250"}

Aquí se incluyen también dispositivos con cierta interactividad directa como son los `htmlwidgets` o si se conoce el lenguaje, código de Observable JS.

La galería de `widgets` disponibles en la actualidad cuenta con 132 dispositivos que se puede ver en <https://gallery.htmlwidgets.org/>


## Interactividad

Los documentos que tienen elementos interactivos de R utilizan **Shiny** como servidor. **Shiny** es una librería para producir aplicaciones interactivas bajo R y recientemente en python.

Anteriormente vimos que la cabecera YAML tiene que tener la opción `server: shiny` para que este se encuentre activo y pueda utilizarse dentro del tablero.

La estructura de Shiny necesita de dos componentes:

- la interfaz de usuario (ui)
- el servidor Shiny

El funcionamiento interno es tipo cliente/servidor, donde en la interfaz de usuario se ubican los `inputs` con los que el usuario se vincula y del lado del servidor se responde a los cambios de esas entradas.

Generalmente los `inputs` van dentro de la barra lateral y el `server` se declara como contexto en los fragmentos de código. Por ejemplo:

````{.yaml}

## {.sidebar}

```{{r}}
selectInput(
    "variableChoice",
    "Seleccione una variable:",
    choices = names(mtcars)
  )
```

## Row

```{{r}}
#| context: server

output$variablePlot <- renderPlot({
  yVar <- mtcars[[input$variableChoice]]
  plot(mtcars$index, yVar)
})
```


````

Este código tiene un `input` de selección en la barra lateral, donde el usuario puede seleccionar una variable del dataset mtcars, y un fragmento de contexto servidor donde renderiza un gráfico de dispersión en base a la variable elegida (input$variableChoice).

## Inputs

Las entradas de Shiny son funciones que sirven para crear elementos de interfaz de usuario que solicitan al usuario valores de entrada o interacción.

Algunos de sus inputs básicos son:

![](images/basic-widgets.png){fig-align="center" width="700"}

Botones, casillas de verificación (sola o múltiples), ingreso de fechas, números y texto, rangos, cajas de selección, barras de desplazamiento, etc son algunos de los muchos dispositivos que vienen ya preparados.

La referencia a esas funciones las podrán encontrar en <https://shiny.posit.co/r/reference/shiny/latest/>.

## Temas

De la misma forma que en los productos Quarto anteriores se pueden definir temas estéticos preconfigurados o personalizar uno propio, mediante la declaración en la cabecera YAML de `theme:`.

Entre los predeterminados, encontramos 25 posibles ([Bootswatch project](https://bootswatch.com/)): `lumen`, `materia`, `minty`, `slate` son alguno de ellos.

Para personalizar un tema se procede a utilizar archivos css o scss ([Sass](https://sass-lang.com/)). Bootstrap define más de 1400 variables `Sass` que controlan fuentes, colores, relleno, bordes y mucho más. Se pueden ver todas las variables aquí:

<https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss>

Para personalizar un tema Bootstrap existente con un conjunto propio de variables o reglas, solo definimos el tema base y luego los archivos de tema personalizados:

````{.yaml}

theme:
  - cosmo
  - custom.scss


````

El archivo de personalización Sass `custom.scss` podría ser:

````{.yaml}
/*-- scss:defaults --*/
$h2-font-size:          1.6rem !default;


/*-- scss:rules --*/
h1, h2, h3, h4, h5, h6 {
  text-shadow: -1px -1px 0 rgba(0, 0, 0, .3);
}

````


Donde en la sección indicada por `/*-- scss:defaults --*/` pertenece a las variables (`$h2-font-size:` tamaño de fuente en encabezado 2) y la sección de reglas (donde van las reglas CSS normales) está indicada por el `/*-- scss:rules --*/` (`text-shadow: -1px -1px 0 rgba(0, 0, 0, .3);` sombreado en encabezados desde 1 al 6).


Naturalmente, también se puede crear un tema totalmente personalizado y proporcionar solo eso (en este caso, se hereda el tema Bootstrap predeterminado):

````{.yaml}

theme: custom.scss

````


Las variables Sass más comunes estan publicadas en: <https://quarto.org/docs/dashboards/theming.html#sass-variables>

Mas información sobre temas HTML en <https://quarto.org/docs/output-formats/html-themes-more.html>

## Publicación

Los tableros suelen ser simplemente páginas HTML estáticas, por lo que se pueden implementar en cualquier servidor web.

Estos tableros, a su vez si se combinan con una lectura periódica de la fuente de datos pueden mostrar actualizaciones según vayan variando esos datos. A esto se le llama **tablero programado**  (por ejemplo, a través de una tarea [cron](https://es.wikipedia.org/wiki/Cron_(Unix)#:~:text=En%20el%20sistema%20operativo%20Unix,especifican%20en%20el%20archivo%20crontab%20.)). 

También se pueden parametrizar, a traves de `parameters` en la cabecera YAML o bien pasar a ser tableros completamente interactivos con Shiny, donde se requiere un servidor especial para su implementación.

RStudio trae incorporado en su IDE accesos directos de publicación a [Posit Connect Cloud](https://connect.posit.cloud/) mediante el botón ![](images/connect.PNG), dado que pertenece a la misma empresa **Posit**. Sus servicios son los que mejor se adaptan a los requerimientos de usuarios que producen estos documentos pero con planes comerciales. 

Otras opciones de sitios que publican tableros estáticos gratuitamente son:

- **Quarto Pub**

Es un servicio gratuito de publicación de contenido hecho en Quarto. Además de tableros se puede alojar blogs, sitios web, libros, presentaciones y otros documentos.

Estas publicaciones serán siempre visibles por cualquier usuario de Internet, no pueden tener más de 100 Mb y poseen un ancho de banda de navegación de 10 Gb por mes.

Se puede publicar mediante el comando `quarto publish` en la Terminal. Deberá tener una cuenta a su nombre que podrá obtener en <https://www.quarto.pub>. La dirección creada agrega como dominio **quarto.pub** a su nombre de usuario y luego la dirección al sitio creado (puede tener varios). La administración se realiza desde el propio sitio web.

Más información en <https://quarto.org/docs/publishing/quarto-pub.html>

- **Confluence**

[Atlassian Confluence](https://www.atlassian.com/software/confluence) es una plataforma de publicación que soporta la colaboración en equipo.

Quarto proporciona la cpacidad de publicar documentos individuales, así como proyectos compuestos por múltiples documentos en [Confluence Spaces](https://support.atlassian.com/confluence-cloud/docs/use-spaces-to-organize-your-work/).

Confluence cuenta con una variedad de opciones de alojamiento que incluyen planes de suscripción gratuitos y pagos.

Se puede publicar mediante el comando `quarto publish confluence` en la Terminal de RStudio, siempre y cuando contemos con una cuenta configurada.

Para más información ver en <https://quarto.org/docs/publishing/confluence.html>

- **GitHub Pages**

Es un servicio de alojamiento de [sitios web](https://pages.github.com/) que le permite publicar contenido basado en código fuente administrado dentro de un repositorio de GitHub.

Los repositorios [GitHub](https://github.com/) se alojan en una plataforma online de desarrollo de software basada en la nube que permite a los desarrolladores almacenar, compartir y trabajar juntos en proyectos de código abierto. GitHub utiliza un sistema de control de versiones llamado Git para alojar los proyectos y llevar un registro de los cambios. Esto permite colaborar y realizar cambios en los proyectos compartidos, al tiempo que mantienen un seguimiento detallado del progreso.

También se puede publicar mediante el comando `quarto publish gh-pages` en la Terminal de RStudio, mientras exista la cuenta y repositorio del proyecto y esté habilitada la opción de GitHub Pages.


Para más información leer <https://quarto.org/docs/publishing/github-pages.html>

En el caso de tableros interactivos, que necesiten de un servidor Shiny, se puede usar versiones en la nube tipo:

- **shinyapps.io**

[Shiny Apps](https://shiny.posit.co/) de Posit es un sitio de alojamiento con recursos de servidor para aplicaciones interactivas Shiny.

El plan gratuito consta de un máximo de 5 aplicaciones subidas y 25 horas activas (uso de la aplicación). Luego posee planes comerciales con mayores recursos.

La publicación viene integrada con RStudio y utiliza el paquete `rsconnect` para realizar las tareas necesarias.

- **Hugging Face**

[Hugging Face](https://huggingface.co/) es una plataforma open source de ciencia de datos y machine learning que proporciona herramientas para construir, entrenar y desplegar soluciones de aprendizaje automático. Como repositorio es similar a GitHub y tiene un servicio de **Spaces** donde se pueden publicar aplicaciones [Shiny](https://huggingface.co/docs/hub/spaces-sdks-docker-shiny) mediante tecnología [Docker](https://es.wikipedia.org/wiki/Docker_(software)).



O instalación de servidores locales como [Shiny Server](https://posit.co/products/open-source/shinyserver/) (open-source), que seguramente necesitará de personal formado como Administrador de TI y disponer de un servidor linux con conexión simétrica a Internet y firewall, entre otros recursos.  




