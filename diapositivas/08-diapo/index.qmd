---
pagetitle: "Documentos estáticos de Quarto®"
format: 
  revealjs:
    self-contained: true
    width: 1920
    height: 1080
    slide-number: true
    transition: fade
    theme: [simple, custom.scss]
    logo: INE.gif
    footer: "Instituto Nacional de Epidemiología"
editor: source
---

```{r setup, include=F}
library(quarto)
library(fontawesome)
library(tidyverse)
```

##  {#docu-estaticos-title data-menu-title="Documentos estáticos de Quarto®" background-image="images/notepad.jpg" aria-label="Mujer escribiendo un documento"}

[Documentos estáticos de<br>Quarto® primera parte]{.custom-title}

[Encuentro 7]{.custom-subtitle}

## Cabecera YAML: Opciones de salida {.title-top}

<br>

``` yaml
---
format: html
---
```

. . .

``` yaml
---
format: pdf
---
```

. . .

``` yaml
---
format: typst
---
```

`typst` es un [nuevo sistema de composición tipográfica](https://typst.app/docs/) basado en marcas para ciencia.

. . .

Se le pueden agregar opciones. Las opciones deben estar debajo del formato principal (los espacios son importante y hay que respetarlos -identación-)

``` yaml
---
format: 
  html:
    toc: true
    code-fold: true
---
```

## YAML es sensible a la identación {.title-top}

::: columns
::: {.column width="70%"}
``` yaml
---
format:html # invalido, falta espacio luego de :
---

---
format: # invalido, se lee como formato ausente
html
---

---
format: 
  html: # valido pero necesita de opciones posteriores
---
```

El formato válido puede ser diferente según lo que se necesite.

``` yaml
format: html # valido - hay espacio

# valido - formato con opciones
format: 
  html:
    toc: true
```
:::

::: {.column width="30%"}
![](images/trabajando.jpg){.r-stretch}
:::
:::

## Ventajas de RStudio {.title-top}

<br>

RStudio (también algunos otros editores como VSCode) integran entre sus herramientas la finalización enriquecida: podemos comenzar con una palabra y tabular (TAB) para completar, o presionar `Ctrl + espacio` para ver todas las opciones disponibles.

![](images/Captura1.PNG){.absolute top="370" left="550" width="800"}

## Texto y Markdown {.title-top transition="zoom"}

<br>

Inicialmente y para el uso general conviene aprovechar el `modo Visual` de RStudio para incorporar marcas de lenguaje Markdown. Prácticamente todos los elementos incorporados con formato markdown aplican en los diferentes formatos de salida (HTML, pdf, etc)

![](images/Captura2.PNG){.absolute top="320" left="400" width="1100"}

## Bloques {.title-top}

Pandoc y, por tanto, Quarto aceptan bloques *Divs* y *Spans* propios del HTML con sintaxis delimitada por :::

Estructura general:

-   Comienza y termina con igual número de : - mínimo de 3 :::
-   Agregar llaves para indicar el inicio de la clase `{.class}` o `{varias-clase}`

```         
::: {.class}

Este contenido es el modificado

:::
```

. . .

```         
::: {style="border-left:10px solid purple"}

Este contenido tiene un diseño de borde izquierdo violeta

:::
```

. . .

::: {style="border-left:10px solid purple"}
*Este contenido tiene un diseño de borde izquierdo violeta*
:::

. . .

-   Se puede pensar en una división ::: como un `<div>` **HTML** pero que también sirve cuando la salida es en PDF.

## Bloques de llamadas {.title-top}

<br>

El formato básico de un bloque de llamadas es:

```{}
::: {.callout-*}
## Título del bloque

Texto incluído
:::
```

donde el * se reemplaza por el tipo de bloque. Además se puede configurar la apariencia y si se muestra o no el ícono asociado.

. . .

::: callout-note
## Nota {.title-top}

Existen cinco tipos de leyendas, que incluyen: `note` (nota), `tip` (consejo), `warning` (advertencia), `caution` (precaución), e `important` (importante)
:::






## Bloques de llamadas {.title-top}

<br>

::: callout-warning
## Advertencia

Estos bloques facilitan una forma sencilla de llamar la atención, por ejemplo, sobre esta advertencia.
:::

. . .

::: callout-important
## Importante

Se pueden editar los titulos con doble #. Por ejemplo: \## Importante
:::

. . .

::: callout-tip
## Consejo

Tip o consejo dado
:::

. . .

::: callout-caution
## Precaución

Esto se encuentra bajo construcción
:::

## Bloques de línea (Spans) {.title-top}

Estructura general:

-   Encerrar el texto con corchetes \[\].
-   Agregar llaves para indicar el inicio de la clase `{.class}` o `{varias-clases}`

\[texto\]{.class}

. . .

-   Estos spans entre corchetes [texto]{.class} se pueden considerar como un `<span .class>Texto</span>` de **HTML** pero nuevamente estos son compatibles para aplicar atributos nativos de Pandoc/Quarto.

<br>

Este es un texto con formato \[especial\]{style="color:orange;"}.

. . .

Este es un texto con formato [especial]{style="color:orange;"}.

-   Tanto los Divs como los Spans se pueden agregar desde el modo Visual: *Format -\> Div...* y *Format -\> Span...*

## Figuras {.nostretch .title-top}

-   Sintaxis básica de markdown

\![Mar del Plata\](images/mdp.jpg)

![Mar del Plata](images/mdp.jpg)

## Figuras {.nostretch .title-top}

-   Sintaxis markdown con opciones

\![Mar del Plata\](images/mdp.jpg){width=120%}

![Mar del Plata](images/mdp.jpg){width="120%"}

## Figuras {.nostretch .title-top}

-   Desde código R

```{r}
#| echo: fenced
#| out-width: 50%
#| fig-align: right


knitr::include_graphics("images/mdp.jpg")
```

## Fragmentos / columnas

::: columns
::: {.column width="50%"}
\![Mar del Plata\](images/mdp.jpg){fig-align="left"}

![Mar del Plata](images/mdp.jpg){fig-align="left"}

Las columnas se construyen con bloques Divs ::: columns y luego ::: {.column width="50%"} para cada una de ellas (en este ejemplo que son 2). Cada bloque se cierra con :::
:::

::: {.column width="50%"}
\![\](images/mdp2.png){fig-align="right" .lightbox}

![](images/mdp2.PNG){.lightbox fig-align="right"}

La opción `.lightbox` utiliza la librería de javascript [GLightbox](https://biati-digital.github.io/glightbox/) para mostrar un efecto sobre la imagen cuando pulsamos sobre ella.
:::
:::

## Pestañas (TabSet)  {.title-top}

::: panel-tabset
## Codigo

```{r}
#| echo: fenced
#| eval: false
head(datasets::iris)
```

Las pestañas son un bloque Divs especiales ::: {.panel-tabset} :::

El nombre de cada pestaña se establece con **\## Nombre**

Al ser dinámicas, solo funcionan en salidas HTML.

## Salida

```{r}
#| eval: true
#| echo: false
head(datasets::iris)
```
:::


## Enlaces web {.title-top}

<br>

Existen varios tipos de "enlaces" o hipervínculos.

<br>

::: columns
::: {.column width="65%"}
**Markdown**

``` markdown
Se pueden insertar links en formato Markdown vinculados 
a un texto como este de [Quarto](https://quarto.org/), 
URL directas como <https://www.ine.gov.ar/> y 
enlaces a [otros lugares](#docu-estaticos-title) 
en el mismo documento. 
La sintaxis es similar a incrustar un imagen en línea: 
![Nombre](imagen.png). 
```
:::

::: {.column .fragment width="35%"}
**Salida**

Se pueden insertar links en formato Markdown vinculados a un texto como este de [Quarto](https://quarto.org/), URL directas como <https://www.ine.gov.ar/> y 
enlaces a [otros lugares](#docu-estaticos-title) en el mismo documento. 
La sintaxis es similar a incrustar un imagen en línea: ![Logo INE](INE.gif){style="width:50px;"}.
:::
:::



## Listas {.title-top}

<br>

Listas sin orden:

::: columns
::: {.column width="50%"}
**Markdown:**

``` markdown
-   Lista sin orden       
    -   sub-item 1         
    -   sub-item 1         
        -   sub-sub-item 1 
```
:::

::: {.column .fragment width="50%" fragment-index="1"}
**Salida**

-   Lista sin orden
    -   sub-item 1\
    -   sub-item 1
        -   sub-sub-item 1
:::
:::

Listas ordenadas:

::: columns
::: {.column width="50%"}
**Markdown:**

``` markdown
1. Lista ordenada            
2. item 2                  
   i. sub-item 1          
      a.  sub-sub-item 1
```
:::

::: {.column .fragment width="50%" fragment-index="2"}
**Salida**

1.  Lista ordenada\
2.  item 2
    i.  sub-item 1
        a.  sub-sub-item 1
:::
:::

## Citas

<br>

**Markdown:**

``` markdown
> Cambiemos nuestra actitud tradicional hacia la construcción 
> de programas: en lugar de imaginar que nuestra tarea principal
> es indicarle a una computadora qué hacer, concentrémonos más
> bien en explicar a los seres humanos lo que queremos que haga
> una computadora. - Donald Knuth
```

. . .

<br>

**Salida:**

> Cambiemos nuestra actitud tradicional hacia la construcción de programas: en lugar de imaginar que nuestra tarea principal es indicarle a una computadora qué hacer, concentrémonos más bien en explicar a los seres humanos lo que queremos que haga una computadora. - Donald Knuth

::: aside
"Literate Programming", The Computer Journal 27 (1984), p. 97. (Reprinted in Literate Programming, 1992, p. 99.) Literate Programming (1984) <br> <br>
:::

## Tablas {.title-top}

<br>

Tablas Markdown

**Markdown:**

``` markdown
| Derecha | Izquierda | Predeterminado | Centrado |
|--------:|:----------|----------------|:--------:|
|    12   |    12     |       12       |    12    |
|   123   |   123     |      123       |   123    |
|     1   |     1     |        1       |     1    |
```

. . .

<br>

**Salida:**

| Derecha | Izquierda | Predeterminado | Centrado |
|--------:|:----------|----------------|:--------:|
|      12 | 12        | 12             |    12    |
|     123 | 123       | 123            |   123    |
|       1 | 1         | 1              |    1     |

## Tablas Grid (cuadrícula) {.title-top}

<br>

Las tablas cuadrícula son un tipo más avanzado de tablas de Markdown que permiten otros elementos (múltiples párrafos, bloques de código, listas, etc.)

<br>

**Markdown:**

``` markdown
+---------------+---------------+--------------------+
| Formato       | Extensión     | Ventajas           |
+===============+===============+====================+
| Documento     | pdf           | - Seguro           |
| portable      |               | - Universal        |
+---------------+---------------+--------------------+
| Word          | docx          | - Editable         |
|               |               | - Universal        |
+---------------+---------------+--------------------+

: Ejemplo tabla cuadrícula 
```

## Tablas Grid (cuadrícula) {.title-top}

<br>

**Salida:**

<br>

+--------------------+----------------+----------------+
| Formato            | Extensión      | Ventajas       |
+====================+================+================+
| Documento portable | pdf            | -   Seguro     |
|                    |                | -   Universal  |
+--------------------+----------------+----------------+
| Word               | docx           | -   Editable   |
|                    |                | -   Universal  |
+--------------------+----------------+----------------+

: Ejemplo tabla cuadrícula

## Tablas cuadrícula: Alineación {.title-top}

<br>

-   Las alineaciones se pueden especificar como en las tablas anteriores, colocando dos puntos en los límites de la línea de separación después del encabezado:

```         
+--------------------+---------------+--------------------+
| Derecha            | Izquierda     | Centrado           |
+===================:+:==============+:==================:+
| Documento portable | pdf           | -  Seguro          |
+--------------------+---------------+--------------------+
```

. . .

<br>

-   Para tablas sin encabezado, los dos puntos van en la línea superior:

```         
+--------------:+:--------------+:------------------:+
| Derecha       | Izquierda     | Centrado           |
+---------------+---------------+--------------------+
```

## Tablas cuadrícula: Creación {.title-top}

<br>

:::: columns

::: {.column width="50%"}

::: incremental
-   Tengamos en cuenta que las tablas cuadrícula son bastante complicadas de escribir con un editor de texto plano porque, a diferencia de las tablas comunes, los indicadores de columna deben alinearse.

<br>

-   ¡El Editor Visual puede ayudar a crear estas tablas! para profundizar ver [Guía Quarto](https://quarto.org/docs/visual-editor/content.html#editing-tables)

<br>

-   También podemos utilizar herramientas online como [TablesGenerator](https://www.tablesgenerator.com/markdown_tables)
:::

:::

::: {.column width="50%"}

![](images/letras.jpg){.absolute top="200" left="1250" width="500"}

:::

::::

## Fórmulas {.title-top}

<br>

Al igual que en RMarkdown se puede insertar fórmulas matemáticas Latex en linea o en imagen completa, utilizando \$ o \$\$ según corresponda.

-   Este es un ejemplo de formula en linea $\sqrt{\frac{\alpha}{2}}$

``` markdown
$\sqrt{\frac{\alpha}{2}}$
```

<br>

-   La siguiente es una formula completa:

$$
R(t)= A \left(\frac{E_0}{\rho_0}\right)^{1/5}t^{2/5}
$$
``` markdown
$$
R(t)= A \left(\frac{E_0}{\rho_0}\right)^{1/5}t^{2/5}
$$
``` 

## Caracteres especiales, emojis y listas de definiciones {.title-top}

![](images/tipos_0.webp){.absolute top="230" left="1050" width="600"}

<br>

En el modo Visual se pueden insertar facilmente caracteres especiales de distinto tipo, emojis y listas de términos. Por ejemplo:

<br>

Caracteres especiales:

② ≋ 𝄞 ⍾ ◴ ⭆

<br>

Emojis:

😀 🥶 👍 🤡

<br>

Listas de definición

**Clase** en programación orientada a objetos

:   Es una plantilla que define las características y comportamientos de una entidad




## Diagramas {.title-top}

`Quarto` tiene soporte nativo para incrustar diagramas [Mermaid](https://mermaid-js.github.io/mermaid/#/) y [Graphviz](https://graphviz.org/) . Esto permite crear diagramas de flujo, diagramas de secuencia, diagramas de estado, diagramas de Gantt y otros utilizando una sintaxis de texto plano inspirada en Markdown.

```{{{mermaid}}}
flowchart LR
  A[Inicio] --> B(Pre-proceso)
  B --> C{Decisión}
  C --> D[Resultado 1]
  C --> E[Resultado 2]
```

![](images/diagrama.PNG){width="60%"}

-   Para ver más sobre la [documentación de Mermaid.js](https://mermaid-js.github.io/mermaid/#/flowchart)

##  {#docu-estaticos-end data-menu-title="Continuará..." background-image="images/papel.jpg" aria-label="Unos papeles escritos"}

::: r-fit-text
[Continuará...]{style="color:#5e3f0f;font-family: 'Sedan', italic;"}
:::
